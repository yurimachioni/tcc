softwares: codeblocks v13.12
           chipmunk v6.2.1
           CMake v2.8.12

1- baixe e instale o codeblocks
2- baixe e instale o cmake
3- descompacte o chipmunk pra algum lugar
4- use o cmake para gerar um projeto do codeblocks (.cbp) com base nos .c e no CMakeLists fornecido pelo chipmunk. Direcione a saida do cmake em alguma outra pasta de facil acesso (C:\ por exemplo). Se der erro (e vai dar) desmarque os Demos que ele ta tentando gerar (eles precisam do opengl pra compilar).
5- abra esse .cbp no codeblocs e clique em build, isso ira gerar os .obj junto aos quais o projeto deve ser linkado.

No projeto em que voce quer usar o chipmunk:

configure os search directories e as opçoes de linkagem e compilaçao da seguinte forma para o projeto:

1- clique com o botao direito sobre o projeto e va em 'properties' e depois em 'project's build options...'
2- para evitar problemas, pode-se forçar C99 em other options, colando "-std=c99"
3- em linker options adicione "C:\chimunk-build\src\libchipmunk.a" (caso tenha compilado o chipmunk neste diretorio, obviamente)
4- em 'Search Directories' / 'Compiler' adicione "C:\Chipmunk-6.2.1\include\chipmunk"
5- ainda em Search Directories, mas na aba linker, adicione "C:\chimunk-build\src\CMakeFiles\chipmunk_static.dir"

de OK, OK e tente compilar o codigo de exemplo:



#include <stdio.h>
#include <chipmunk.h>

int main(void){
        // cpVect is a 2D vector and cpv() is a shortcut for initializing them.
        cpVect gravity = cpv(0, -100);

        // Create an empty space.
        cpSpace *space = cpSpaceNew();
        cpSpaceSetGravity(space, gravity);

        // Add a static line segment shape for the ground.
        // We'll make it slightly tilted so the ball will roll off.
        // We attach it to space->staticBody to tell Chipmunk it shouldn't be movable.
        cpShape *ground = cpSegmentShapeNew(space->staticBody, cpv(-20, 5), cpv(20, -5), 0);
        cpShapeSetFriction(ground, 1);
        cpSpaceAddShape(space, ground);

        // Now let's make a ball that falls onto the line and rolls off.
        // First we need to make a cpBody to hold the physical properties of the object.
        // These include the mass, position, velocity, angle, etc. of the object.
        // Then we attach collision shapes to the cpBody to give it a size and shape.

        cpFloat radius = 5;
        cpFloat mass = 1;

        // The moment of inertia is like mass for rotation
        // Use the cpMomentFor*() functions to help you approximate it.
        cpFloat moment = cpMomentForCircle(mass, 0, radius, cpvzero);

        // The cpSpaceAdd*() functions return the thing that you are adding.
        // It's convenient to create and add an object in one line.
        cpBody *ballBody = cpSpaceAddBody(space, cpBodyNew(mass, moment));
        cpBodySetPos(ballBody, cpv(0, 15));

        // Now we create the collision shape for the ball.
        // You can create multiple collision shapes that point to the same body.
        // They will all be attached to the body and move around to follow it.
        cpShape *ballShape = cpSpaceAddShape(space, cpCircleShapeNew(ballBody, radius, cpvzero));
        cpShapeSetFriction(ballShape, 0.7);

        // Now that it's all set up, we simulate all the objects in the space by
        // stepping forward through time in small increments called steps.
        // It is *highly* recommended to use a fixed size time step.
        cpFloat timeStep = 1.0/60.0;
        for(cpFloat time = 0; time < 2; time += timeStep){
                cpVect pos = cpBodyGetPos(ballBody);
                cpVect vel = cpBodyGetVel(ballBody);
                printf(
                        "Time is %5.2f. ballBody is at (%5.2f, %5.2f). It's velocity is (%5.2f, %5.2f)\n",
                        time, pos.x, pos.y, vel.x, vel.y
                );

                cpSpaceStep(space, timeStep);
        }

        // Clean up our objects and exit!
        cpShapeFree(ballShape);
        cpBodyFree(ballBody);
        cpShapeFree(ground);
        cpSpaceFree(space);

        return 0;
}